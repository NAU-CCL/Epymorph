# Modeled after the SPARSEMOD COVID-19 paper, this model simulates
# movement using a distance kernel parameterized by phi, and using a commuters
# matrix to determine the total expected number of commuters.

[move-steps: per-day=2; duration=[1/3, 2/3]]

[attrib: source=geo; name=centroid; shape=N; dtype=[(longitude, float), (latitude, float)];
    description="The centroids for each node as (longitude, latitude) tuples."]

[attrib: source=geo; name=commuters; shape=NxN; dtype=int;
    description="A node-to-node commuters matrix."]

[attrib: source=params; name=phi; shape=S; dtype=float;
    description="Influences the distance that movers tend to travel."]

[predef: function = 
def sparsemod_predef():
    centroid = geo['centroid']
    distance = pairwise_haversine(centroid['longitude'], centroid['latitude'])
    dispersal_kernel = row_normalize(1 / np.exp(distance / params['phi']))
    return {
        'commuters_by_node': np.sum(geo['commuters'], axis=1),
        'dispersal_kernel': dispersal_kernel
    }
]

# Commuter movement
[mtype: days=all; leave=1; duration=0d; return=2; function=
def sparsemod_commuters(t):
    n_commuters = predef['commuters_by_node']
    return np.multinomial(n_commuters, predef['dispersal_kernel'])
]
