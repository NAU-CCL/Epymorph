[move-steps: per-day=2; duration=[2/3, 1/3]]

[predef: function = 
def centroids_movement():
    radius = 3959.87433 # radius of earth in mi

    def pairwise(arr, func):
        row = arr[:, None]
        col = arr[None, :]
        return func(row, col)

    def normalized_row(arr):
        return arr / arr.sum(axis=1, keepdims=True)

    def pairwise_haversine(arr):
        lng = radians(arr[:, 0])
        dlng = pairwise(lng, subtract)
        lat = radians(arr[:, 1])
        dlat = pairwise(lat, subtract)

        return 2 * radius * arcsin(sqrt(
            sin(dlat / 2.0) ** 2 +
            pairwise(cos(lat), multiply) *
            sin(dlng / 2.0) ** 2
        ))

    distance = pairwise_haversine(geo['centroid'])

    dispersal_kernel = normalized_row(1 / exp(distance / param['phi']))

    return { 'dispersal_kernel': dispersal_kernel }
]

# Commuter movement
[mtype: days=all; leave=1; duration=0d; return=2; function=
def sparse_commuters(t, src):
    actual = geo['population'][src] * 0.1
    return multinomial(actual, predef['dispersal_kernel'][src, ...])
]
