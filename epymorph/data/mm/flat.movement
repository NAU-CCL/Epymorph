# This model evenly weights the probability of movement to all other nodes.
# It uses parameter 'commuter_proportion' to determine how many people should
# be moving, based on the total normal population of each node.

[move-steps: per-day=2; duration=[1/3, 2/3]]

[predef: function=
def flat_predef():
    ones = np.ones((dim.nodes, dim.nodes))
    np.fill_diagonal(ones, 0)
    dispersal_kernel = row_normalize(ones)
    return { 'dispersal_kernel': dispersal_kernel }
]

# Assume a percentage of the population move around,
# evenly weighted to all other locations.
[mtype: days=all; leave=1; duration=0d; return=2; function=
def flat_movement(t):
    n_commuters = np.floor(geo['population'] * params['commuter_proportion']).astype(SimDType)
    return np.multinomial(n_commuters, predef['dispersal_kernel'])
]
