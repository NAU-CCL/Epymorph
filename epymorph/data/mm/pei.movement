[move-steps: per-day=2; duration=[1/3, 2/3]]

[predef: function = 
def pei_movement():
    """Pei style movement pre definition"""
    commuters = geo['commuters']
    
    # Average commuters between locations.
    commuters_average = (commuters + commuters.T) // 2
    
    # Total commuters living in each state.
    commuters_by_node = np.sum(commuters, axis=1)
    
    # Commuters as a ratio to the total commuters living in that state.
    # For cases where there are no commuters, avoid div-by-0 errors
    commuting_probability = row_normalize(commuters)

    return {
        'commuters_average': commuters_average, 
        'commuters_by_node': commuters_by_node,
        'commuting_probability': commuting_probability
    }
]

# Commuter movement
[mtype: days=all; leave=1; duration=0d; return=2; function=
def commuters(t):
    typical = predef['commuters_by_node']
    actual = np.binomial(typical, param['move_control'])
    return np.multinomial(actual, predef['commuting_probability'])
]

# Disperser movement
#   We could write it this way, but this is much slower (for now...)
#[mtype: days=all; leave=1; duration=0d; return=2; function=
#def dispersers(t, src, dst):
#    avg = predef['commuters_average'][src, dst]
#    return poisson(avg * param['theta'])
#]

[mtype: days=all; leave=1; duration=0d; return=2; function=
def dispersers(t):
    avg = predef['commuters_average']
    return np.poisson(avg * param['theta'])
]
