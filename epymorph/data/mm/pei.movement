# Modeled after the Pei influenza paper, this model simulates
# two types of movers -- regular commuters and more-randomized dispersers.
# Each is somewhat stochastic but adhere to the general shape dictated
# by the commuters array. Both kinds of movement can be "tuned" through
# their respective parameters: move_control and theta.

[move-steps: per-day=2; duration=[1/3, 2/3]]

[attrib: source=geo; name=commuters; shape=NxN; dtype=int; default_value=None;
    comment="A node-to-node commuters matrix."]

[attrib: source=params; name=move_control; shape=S; dtype=float; default_value=0.9;
    comment="A factor which modulates the number of commuters by conducting a binomial draw with this probability and the expected commuters from the commuters matrix."]

[attrib: source=params; name=theta; shape=S; dtype=float; default_value=0.1;
    comment="A factor which allows for randomized movement by conducting a poisson draw with this factor times the average number of commuters between two nodes from the commuters matrix."]

[predef: function = 
def pei_movement():
    """Pei style movement pre definition"""
    commuters = geo['commuters']
    
    # Average commuters between locations.
    commuters_average = (commuters + commuters.T) // 2
    
    # Total commuters living in each state.
    commuters_by_node = np.sum(commuters, axis=1)
    
    # Commuters as a ratio to the total commuters living in that state.
    # For cases where there are no commuters, avoid div-by-0 errors
    commuting_probability = row_normalize(commuters)

    return {
        'commuters_average': commuters_average, 
        'commuters_by_node': commuters_by_node,
        'commuting_probability': commuting_probability
    }
]

# Commuter movement
[mtype: days=all; leave=1; duration=0d; return=2; function=
def commuters(t):
    typical = predef['commuters_by_node']
    actual = np.binomial(typical, params['move_control'])
    return np.multinomial(actual, predef['commuting_probability'])
]

# Random dispersers movement
[mtype: days=all; leave=1; duration=0d; return=2; function=
def dispersers(t):
    avg = predef['commuters_average']
    return np.poisson(avg * params['theta'])
]
